{"version":3,"sources":["../../src/schema/create-sort-field.js"],"names":["require","GraphQLInputObjectType","GraphQLList","GraphQLEnumType","GraphQLNonNull","_","createKey","module","exports","createSortField","typeName","fieldNames","enumValues","forEach","field","value","SortByType","name","values","type","camelCase","fields","order","defaultValue","ASC","DESC"],"mappings":";;eAMIA,QAAS,SAAT,C;IAJFC,sB,YAAAA,sB;IACAC,W,YAAAA,W;IACAC,e,YAAAA,e;IACAC,c,YAAAA,c;;AAEF,IAAMC,IAAIL,QAAS,QAAT,CAAV;AACA,IAAMM,YAAYN,QAAS,cAAT,CAAlB;;AAEA;AACAO,OAAOC,OAAP,GAAiB,SAASC,eAAT,CACfC,QADe,EAEfC,UAFe,EAGf;AACA,MAAMC,aAAa,EAAnB;AACAD,aAAWE,OAAX,CAAmB,iBAAS;AAC1BD,eAAWN,UAAUQ,KAAV,CAAX,IAA+B,EAAEC,OAAOD,KAAT,EAA/B;AACD,GAFD;;AAIA,MAAME,aAAa,IAAIb,eAAJ,CAAoB;AACrCc,UAAO,GAAEP,QAAS,kBADmB;AAErCQ,YAAQN;AAF6B,GAApB,CAAnB;;AAKA,SAAO;AACLO,UAAM,IAAIlB,sBAAJ,CAA2B;AAC/BgB,YAAMZ,EAAEe,SAAF,CAAa,GAAEV,QAAS,OAAxB,CADyB;AAE/BW,cAAQ;AACNA,gBAAQ;AACNJ,gBAAMZ,EAAEe,SAAF,CAAa,GAAEV,QAAS,aAAxB,CADA;AAENS,gBAAM,IAAIf,cAAJ,CAAmB,IAAIF,WAAJ,CAAgBc,UAAhB,CAAnB;AAFA,SADF;AAKNM,eAAO;AACLL,gBAAMZ,EAAEe,SAAF,CAAa,GAAEV,QAAS,YAAxB,CADD;AAELa,wBAAe,KAFV;AAGLJ,gBAAM,IAAIhB,eAAJ,CAAoB;AACxBc,kBAAMZ,EAAEe,SAAF,CAAa,GAAEV,QAAS,kBAAxB,CADkB;AAExBQ,oBAAQ;AACNM,mBAAK,EAAET,OAAQ,KAAV,EADC;AAENU,oBAAM,EAAEV,OAAQ,MAAV;AAFA;AAFgB,WAApB;AAHD;AALD;AAFuB,KAA3B;AADD,GAAP;AAsBD,CApCD","file":"create-sort-field.js","sourcesContent":["// @flow\nconst {\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst createKey = require(`./create-key`)\n\n// builds an input field for sorting, given an array of names to sort on\nmodule.exports = function createSortField(\n  typeName: string,\n  fieldNames: string[]\n) {\n  const enumValues = {}\n  fieldNames.forEach(field => {\n    enumValues[createKey(field)] = { value: field }\n  })\n\n  const SortByType = new GraphQLEnumType({\n    name: `${typeName}SortByFieldsEnum`,\n    values: enumValues,\n  })\n\n  return {\n    type: new GraphQLInputObjectType({\n      name: _.camelCase(`${typeName} sort`),\n      fields: {\n        fields: {\n          name: _.camelCase(`${typeName} sortFields`),\n          type: new GraphQLNonNull(new GraphQLList(SortByType)),\n        },\n        order: {\n          name: _.camelCase(`${typeName} sortOrder`),\n          defaultValue: `asc`,\n          type: new GraphQLEnumType({\n            name: _.camelCase(`${typeName} sortOrderValues`),\n            values: {\n              ASC: { value: `asc` },\n              DESC: { value: `desc` },\n            },\n          }),\n        },\n      },\n    }),\n  }\n}\n"]}