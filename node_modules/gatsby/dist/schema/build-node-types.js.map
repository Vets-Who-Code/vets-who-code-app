{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","module","exports","nodes","typeName","intermediateType","name","type","allNodes","traceId","fieldsFromPlugins","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","description","interfaces","createNodeFields","proccesedType","isTypeOf","value","internal","inferedInputFields","filterFields","inferredFields","args","resolve","a","context","runSift","latestNodes","filter","n","isObject","path","id","nodeObjectType","node","processedTypes","camelCase","createType","defaultNodeFields","parent","children","map","childNodesByType","flatMap","groupBy","undefined","Object","keys","forEach","maxChildCount","maxBy","values","childNodeType","c","g","length","filteredNodes","nodeId","childNode","find","types","Promise","all"],"mappings":"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","file":"build-node-types.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = { [typeName: string]: ProcessedNodeType }\n\nmodule.exports = async () => {\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({ path, nodeId: n.id })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({ path, nodeId: childNode.id })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      allNodes: getNodes(),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      allNodes: getNodes(),\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          const latestNodes = _.filter(\n            getNodes(),\n            n => n.internal.type === typeName\n          )\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: { filter: { ...args } },\n            nodes: latestNodes,\n            path: context.path ? context.path : `LAYOUT___${context.id}`,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  return processedTypes\n}\n"]}