{"version":3,"sources":["../../src/schema/index.js"],"names":["_","require","GraphQLSchema","GraphQLObjectType","buildNodeTypes","buildNodeConnections","store","invariant","module","exports","typesGQL","connections","values","nodes","mapValues","isEmpty","schema","query","name","fields","dispatch","type","payload"],"mappings":";;;;;;;;;;;;;;;;AACA,IAAMA,IAAIC,QAAS,QAAT,CAAV;;eAC6CA,QAAS,SAAT,C;IAArCC,a,YAAAA,a;IAAeC,iB,YAAAA,iB;;AAEvB,IAAMC,iBAAiBH,QAAS,oBAAT,CAAvB;AACA,IAAMI,uBAAuBJ,QAAS,0BAAT,CAA7B;;gBACkBA,QAAS,UAAT,C;IAAVK,K,aAAAA,K;;AACR,IAAMC,YAAYN,QAAS,WAAT,CAAlB;;AAEAO,OAAOC,OAAP,4EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACQL,gBADR;;AAAA;AACTM,kBADS;AAETC,qBAFS,GAEKN,qBAAqBL,EAAEY,MAAF,CAASF,QAAT,CAArB,CAFL;;AAIf;;AACMG,eALS,GAKDb,EAAEc,SAAF,CAAYJ,QAAZ,EAAuB,MAAvB,CALC;;;AAOfH,oBAAU,CAACP,EAAEe,OAAF,CAAUF,KAAV,CAAX,EAA8B,kCAA9B;AACAN,oBAAU,CAACP,EAAEe,OAAF,CAAUJ,WAAV,CAAX,EAAoC,wCAApC;;AAEMK,gBAVS,GAUA,IAAId,aAAJ,CAAkB;AAC/Be,mBAAO,IAAId,iBAAJ,CAAsB;AAC3Be,oBAAO,eADoB;AAE3BC,iDAAaR,WAAb,EAA6BE,KAA7B;AAF2B,aAAtB;AADwB,WAAlB,CAVA;;;AAiBfP,gBAAMc,QAAN,CAAe;AACbC,kBAAO,YADM;AAEbC,qBAASN;AAFI,WAAf;;AAjBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","file":"index.js","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { GraphQLSchema, GraphQLObjectType } = require(`graphql`)\n\nconst buildNodeTypes = require(`./build-node-types`)\nconst buildNodeConnections = require(`./build-node-connections`)\nconst { store } = require(`../redux`)\nconst invariant = require(`invariant`)\n\nmodule.exports = async () => {\n  const typesGQL = await buildNodeTypes()\n  const connections = buildNodeConnections(_.values(typesGQL))\n\n  // Pull off just the graphql node from each type object.\n  const nodes = _.mapValues(typesGQL, `node`)\n\n  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`)\n  invariant(!_.isEmpty(connections), `There are no available GQL connections`)\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: `RootQueryType`,\n      fields: { ...connections, ...nodes },\n    }),\n  })\n\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n}\n"]}