{"version":3,"sources":["../../src/schema/infer-graphql-type.js"],"names":["inferObjectStructureFromNodes","require","GraphQLObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLUnionType","_","invariant","moment","mime","isRelative","isRelativeUrl","normalize","systemPath","oneLine","store","getNode","getNodes","getRootNodeId","joinPath","createPageDependency","createTypeName","createKey","extractFieldExamples","isEmptyObjectOrArray","ISO_8601_FORMAT","inferGraphQLType","exampleValue","selector","otherArgs","fieldName","split","pop","Array","isArray","headType","isObject","name","fields","inferredType","type","momentDate","utc","isValid","args","formatString","description","fromNow","difference","locale","resolve","object","date","JSON","parse","stringify","isPlainObject","format","diff","isInteger","inferFromMapping","value","mapping","fieldSelector","types","matchedTypes","filter","isEmpty","console","log","findNode","fieldValue","path","linkedType","linkedNode","find","n","internal","id","nodeId","nodeObjectType","node","a","b","map","findLinkedNode","linkedField","inferFromFieldName","uniqBy","v","key","validateLinkedNode","validateField","field","findNodeType","linkedNodes","forEach","i","length","f","join","resolveType","data","result","findRootNode","rootNode","whileCount","rootNodeId","parent","undefined","shouldInferFile","nodes","looksLikeFile","isString","lookup","get","visit","current","fn","keys","Object","concat","proceed","isNormalInteger","test","str","isMatch","k","normalizedSelector","s","fullSelector","pathToOtherNode","dir","otherFileExists","some","absolutePath","inferFromUri","fileField","findLinkedFileNode","fileLinkPath","parentFileNode","relativePath","linkedFileNode","EXCLUDE_KEYS","children","config","getState","isRoot","inferredFields","each","nextSelector","inferredField","includes"],"mappings":"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","file":"infer-graphql-type.js","sourcesContent":["// @flow\nconst {\n  GraphQLObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst moment = require(`moment`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nconst normalize = require(`normalize-path`)\nconst systemPath = require(`path`)\nconst { oneLine } = require(`common-tags`)\n\nconst { store, getNode, getNodes, getRootNodeId } = require(`../redux`)\nconst { joinPath } = require(`../utils/path`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type { GraphQLOutputType } from \"graphql\"\nimport type {\n  GraphQLFieldConfig,\n  GraphQLFieldConfigMap,\n} from \"graphql/type/definition\"\n\nexport type ProcessedNodeType = {\n  name: string,\n  nodes: any[],\n  node: GraphQLFieldConfig<*, *>,\n  fieldsFromPlugins: any,\n  nodeObjectType: GraphQLOutputType,\n}\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\nfunction inferGraphQLType({\n  exampleValue,\n  selector,\n  ...otherArgs\n}): ?GraphQLFieldConfig<*, *> {\n  if (exampleValue == null || isEmptyObjectOrArray(exampleValue)) return null\n  let fieldName = selector.split(`.`).pop()\n\n  if (Array.isArray(exampleValue)) {\n    exampleValue = exampleValue[0]\n\n    if (exampleValue == null) return null\n\n    let headType\n    // If the array contains non-array objects, than treat them as \"nodes\"\n    // and create an object type.\n    if (_.isObject(exampleValue) && !_.isArray(exampleValue)) {\n      headType = new GraphQLObjectType({\n        name: createTypeName(fieldName),\n        fields: inferObjectStructureFromNodes({\n          ...otherArgs,\n          exampleValue,\n          selector,\n        }),\n      })\n      // Else if the values are simple values or arrays, just infer their type.\n    } else {\n      let inferredType = inferGraphQLType({\n        ...otherArgs,\n        exampleValue,\n        selector,\n      })\n      invariant(\n        inferredType,\n        `Could not infer graphQL type for value: ${exampleValue}`\n      )\n\n      headType = inferredType.type\n    }\n    return { type: new GraphQLList(headType) }\n  }\n\n  // Check if this is a date.\n  // All the allowed ISO 8601 date-time formats used.\n  const momentDate = moment.utc(exampleValue, ISO_8601_FORMAT, true)\n  if (momentDate.isValid() && typeof exampleValue !== `number`) {\n    return {\n      type: GraphQLString,\n      args: {\n        formatString: {\n          type: GraphQLString,\n          description: oneLine`\n            Format the date using Moment.js' date tokens e.g.\n          \"date(formatString: \"YYYY MMMM DD)\"\n          See https://momentjs.com/docs/#/displaying/format/\n          for documentation for different tokens`,\n        },\n        fromNow: {\n          type: GraphQLBoolean,\n          description: oneLine`\n            Returns a string generated with Moment.js' fromNow function`,\n        },\n        difference: {\n          type: GraphQLString,\n          description: oneLine`\n            Returns the difference between this date and the current time.\n            Defaults to miliseconds but you can also pass in as the\n            measurement years, months, weeks, days, hours, minutes,\n            and seconds.`,\n        },\n        locale: {\n          type: GraphQLString,\n          description: oneLine`\n            Configures the locale Moment.js will use to format the date.\n          `,\n        },\n      },\n      resolve(object, args) {\n        let date\n        if (object[fieldName]) {\n          date = JSON.parse(JSON.stringify(object[fieldName]))\n        } else {\n          return null\n        }\n        if (_.isPlainObject(args)) {\n          const { fromNow, difference, formatString, locale = `en` } = args\n          if (formatString) {\n            return moment\n              .utc(date, ISO_8601_FORMAT, true)\n              .locale(locale)\n              .format(formatString)\n          } else if (fromNow) {\n            return moment\n              .utc(date, ISO_8601_FORMAT, true)\n              .locale(locale)\n              .fromNow()\n          } else if (difference) {\n            return moment().diff(\n              moment.utc(date, ISO_8601_FORMAT, true).locale(locale),\n              difference\n            )\n          }\n        }\n\n        return date\n      },\n    }\n  }\n\n  switch (typeof exampleValue) {\n    case `boolean`:\n      return { type: GraphQLBoolean }\n    case `string`:\n      return { type: GraphQLString }\n    case `object`:\n      return {\n        type: new GraphQLObjectType({\n          name: createTypeName(fieldName),\n          fields: inferObjectStructureFromNodes({\n            ...otherArgs,\n            exampleValue,\n            selector,\n          }),\n        }),\n      }\n    case `number`:\n      return _.isInteger(exampleValue)\n        ? { type: GraphQLInt }\n        : { type: GraphQLFloat }\n    default:\n      return null\n  }\n}\n\nfunction inferFromMapping(\n  value,\n  mapping,\n  fieldSelector,\n  types\n): ?GraphQLFieldConfig<*, *> {\n  const matchedTypes = types.filter(\n    type => type.name === mapping[fieldSelector]\n  )\n  if (_.isEmpty(matchedTypes)) {\n    console.log(`Couldn't find a matching node type for \"${fieldSelector}\"`)\n    return null\n  }\n\n  const findNode = (fieldValue, path) => {\n    const linkedType = mapping[fieldSelector]\n    const linkedNode = _.find(\n      getNodes(),\n      n => n.internal.type === linkedType && n.id === fieldValue\n    )\n    if (linkedNode) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n      return linkedNode\n    }\n    return null\n  }\n\n  if (_.isArray(value)) {\n    return {\n      type: new GraphQLList(matchedTypes[0].nodeObjectType),\n      resolve: (node, a, b, { fieldName }) => {\n        const fieldValue = node[fieldName]\n\n        if (fieldValue) {\n          return fieldValue.map(value => findNode(value, b.path))\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: matchedTypes[0].nodeObjectType,\n    resolve: (node, a, b, { fieldName }) => {\n      const fieldValue = node[fieldName]\n\n      if (fieldValue) {\n        return findNode(fieldValue, b.path)\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findLinkedNode(value, linkedField, path) {\n  let linkedNode\n  // If the field doesn't link to the id, use that for searching.\n  if (linkedField) {\n    linkedNode = getNodes().find(n => n[linkedField] === value)\n    // Else the field is linking to the node's id, the default.\n  } else {\n    linkedNode = getNode(value)\n  }\n\n  if (linkedNode) {\n    if (path) createPageDependency({ path, nodeId: linkedNode.id })\n    return linkedNode\n  }\n  return null\n}\n\nfunction inferFromFieldName(value, selector, types): GraphQLFieldConfig<*, *> {\n  let isArray = false\n  if (_.isArray(value)) {\n    isArray = true\n    // Reduce values to nodes with unique types.\n    value = _.uniqBy(value, v => getNode(v).internal.type)\n  }\n\n  const key = selector.split(`.`).pop()\n  const [, , linkedField] = key.split(`___`)\n\n  const validateLinkedNode = linkedNode => {\n    invariant(\n      linkedNode,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding node with the ${linkedField || `id`}\n        field matching: \"${value}\"\n      `\n    )\n  }\n  const validateField = (linkedNode, field) => {\n    invariant(\n      field,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding GraphQL type \"${\n          linkedNode.internal.type\n        }\" available\n        to link to this node.\n      `\n    )\n  }\n\n  const findNodeType = node =>\n    types.find(type => type.name === node.internal.type)\n\n  if (isArray) {\n    const linkedNodes = value.map(v => findLinkedNode(v))\n    linkedNodes.forEach(node => validateLinkedNode(node))\n    const fields = linkedNodes.map(node => findNodeType(node))\n    fields.forEach((field, i) => validateField(linkedNodes[i], field))\n\n    let type\n    // If there's more than one type, we'll create a union type.\n    if (fields.length > 1) {\n      type = new GraphQLUnionType({\n        name: `Union_${key}_${fields.map(f => f.name).join(`__`)}`,\n        description: `Union interface for the field \"${key}\" for types [${fields\n          .map(f => f.name)\n          .join(`, `)}]`,\n        types: fields.map(f => f.nodeObjectType),\n        resolveType: data =>\n          fields.find(f => f.name == data.internal.type).nodeObjectType,\n      })\n    } else {\n      type = fields[0].nodeObjectType\n    }\n\n    return {\n      type: new GraphQLList(type),\n      resolve: (node, a, b = {}) => {\n        let fieldValue = node[key]\n        if (fieldValue) {\n          return fieldValue.map(value =>\n            findLinkedNode(value, linkedField, b.path)\n          )\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  const linkedNode = findLinkedNode(value, linkedField)\n  validateLinkedNode(linkedNode)\n  const field = findNodeType(linkedNode)\n  validateField(linkedNode, field)\n  return {\n    type: field.nodeObjectType,\n    resolve: (node, a, b = {}) => {\n      let fieldValue = node[key]\n      if (fieldValue) {\n        const result = findLinkedNode(fieldValue, linkedField, b.path)\n        return result\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findRootNode(node) {\n  // Find the root node.\n  let rootNode = node\n  let whileCount = 0\n  let rootNodeId\n  while (\n    (rootNodeId = getRootNodeId(rootNode) || rootNode.parent) &&\n    (getNode(rootNode.parent) !== undefined || getNode(rootNodeId)) &&\n    whileCount < 101\n  ) {\n    if (rootNodeId) {\n      rootNode = getNode(rootNodeId)\n    } else {\n      rootNode = getNode(rootNode.parent)\n    }\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return rootNode\n}\n\nfunction shouldInferFile(nodes, key, value) {\n  const looksLikeFile =\n    _.isString(value) &&\n    mime.lookup(value) !== `application/octet-stream` &&\n    // domains ending with .com\n    mime.lookup(value) !== `application/x-msdownload` &&\n    isRelative(value) &&\n    isRelativeUrl(value)\n\n  if (!looksLikeFile) {\n    return false\n  }\n\n  // Find the node used for this example.\n  let node = nodes.find(n => _.get(n, key) === value)\n\n  if (!node) {\n    // Try another search as our \"key\" isn't always correct e.g.\n    // it doesn't support arrays so the right key could be \"a.b[0].c\" but\n    // this function will get \"a.b.c\".\n    //\n    // We loop through every value of nodes until we find\n    // a match.\n    const visit = (current, selector = [], fn) => {\n      for (let i = 0, keys = Object.keys(current); i < keys.length; i++) {\n        const key = keys[i]\n        const value = current[key]\n\n        if (value === undefined || value === null) continue\n\n        if (typeof value === `object` || typeof value === `function`) {\n          visit(current[key], selector.concat([key]), fn)\n          continue\n        }\n\n        let proceed = fn(current[key], key, selector, current)\n\n        if (proceed === false) {\n          break\n        }\n      }\n    }\n\n    const isNormalInteger = str => /^\\+?(0|[1-9]\\d*)$/.test(str)\n\n    node = nodes.find(n => {\n      let isMatch = false\n      visit(n, [], (v, k, selector, parent) => {\n        if (v === value) {\n          // Remove integers as they're for arrays, which our passed\n          // in object path doesn't have.\n          const normalizedSelector = selector\n            .map(s => (isNormalInteger(s) ? `` : s))\n            .filter(s => s !== ``)\n          const fullSelector = `${normalizedSelector.join(`.`)}.${k}`\n          if (fullSelector === key) {\n            isMatch = true\n            return false\n          }\n        }\n\n        // Not a match so we continue\n        return true\n      })\n\n      return isMatch\n    })\n\n    // Still no node.\n    if (!node) {\n      return false\n    }\n  }\n\n  const rootNode = findRootNode(node)\n\n  // Only nodes transformed (ultimately) from a File\n  // can link to another File.\n  if (rootNode.internal.type !== `File`) {\n    return false\n  }\n\n  const pathToOtherNode = normalize(joinPath(rootNode.dir, value))\n  const otherFileExists = getNodes().some(\n    n => n.absolutePath === pathToOtherNode\n  )\n  return otherFileExists\n}\n\n// Look for fields that are pointing at a file — if the field has a known\n// extension then assume it should be a file field.\nfunction inferFromUri(key, types, isArray) {\n  const fileField = types.find(type => type.name === `File`)\n\n  if (!fileField) return null\n\n  return {\n    type: isArray\n      ? new GraphQLList(fileField.nodeObjectType)\n      : fileField.nodeObjectType,\n    resolve: (node, a, { path }) => {\n      const fieldValue = node[key]\n\n      if (!fieldValue) {\n        return null\n      }\n\n      const findLinkedFileNode = relativePath => {\n        // Use the parent File node to create the absolute path to\n        // the linked file.\n        const fileLinkPath = normalize(\n          systemPath.resolve(parentFileNode.dir, relativePath)\n        )\n\n        // Use that path to find the linked File node.\n        const linkedFileNode = _.find(\n          getNodes(),\n          n => n.internal.type === `File` && n.absolutePath === fileLinkPath\n        )\n        if (linkedFileNode) {\n          createPageDependency({\n            path,\n            nodeId: linkedFileNode.id,\n          })\n          return linkedFileNode\n        } else {\n          return null\n        }\n      }\n\n      // Find the File node for this node (we assume the node is something\n      // like markdown which would be a child node of a File node).\n      const parentFileNode = findRootNode(node)\n\n      // Find the linked File node(s)\n      if (isArray) {\n        return fieldValue.map(relativePath => findLinkedFileNode(relativePath))\n      } else {\n        return findLinkedFileNode(fieldValue)\n      }\n    },\n  }\n}\n\ntype inferTypeOptions = {\n  nodes: Object[],\n  types: ProcessedNodeType[],\n  selector?: string,\n  exampleValue?: Object,\n}\n\nconst EXCLUDE_KEYS = {\n  id: 1,\n  parent: 1,\n  children: 1,\n}\n\n// Call this for the top level node + recursively for each sub-object.\n// E.g. This gets called for Markdown and then for its frontmatter subobject.\nexport function inferObjectStructureFromNodes({\n  nodes,\n  types,\n  selector,\n  exampleValue = extractFieldExamples(nodes),\n}: inferTypeOptions): GraphQLFieldConfigMap<*, *> {\n  const config = store.getState().config\n  const isRoot = !selector\n  const mapping = config && config.mapping\n\n  // Ensure nodes have internal key with object.\n  nodes = nodes.map(n => (n.internal ? n : { ...n, internal: {} }))\n\n  const inferredFields = {}\n  _.each(exampleValue, (value, key) => {\n    // Remove fields common to the top-level of all nodes.  We add these\n    // elsewhere so don't need to infer their type.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Several checks to see if a field is pointing to custom type\n    // before we try automatic inference.\n    const nextSelector = selector ? `${selector}.${key}` : key\n    const fieldSelector = `${nodes[0].internal.type}.${nextSelector}`\n\n    let fieldName = key\n    let inferredField\n\n    // First check for manual field => type mappings in the site's\n    // gatsby-config.js\n    if (mapping && _.includes(Object.keys(mapping), fieldSelector)) {\n      inferredField = inferFromMapping(value, mapping, fieldSelector, types)\n\n      // Second if the field has a suffix of ___node. We use then the value\n      // (a node id) to find the node and use that node's type as the field\n    } else if (_.includes(key, `___NODE`)) {\n      ;[fieldName] = key.split(`___`)\n      inferredField = inferFromFieldName(value, nextSelector, types)\n\n      // Third if the field (whether a string or array of string(s)) is\n      // pointing to a file (from another file).\n    } else if (\n      nodes[0].internal.type !== `File` &&\n      ((_.isString(value) && shouldInferFile(nodes, nextSelector, value)) ||\n        (_.isArray(value) &&\n          value.length === 1 &&\n          _.isString(value[0]) &&\n          shouldInferFile(nodes, `${nextSelector}[0]`, value[0])))\n    ) {\n      inferredField = inferFromUri(key, types, _.isArray(value))\n    }\n\n    // Finally our automatic inference of field value type.\n    if (!inferredField) {\n      inferredField = inferGraphQLType({\n        nodes,\n        types,\n        exampleValue: value,\n        selector: selector ? `${selector}.${key}` : key,\n      })\n    }\n\n    if (!inferredField) return\n\n    // Replace unsupported values\n    inferredFields[createKey(fieldName)] = inferredField\n  })\n\n  return inferredFields\n}\n"]}