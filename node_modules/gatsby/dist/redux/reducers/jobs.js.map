{"version":3,"sources":["../../../src/redux/reducers/jobs.js"],"names":["_","require","oneLine","moment","module","exports","state","active","done","action","type","payload","id","Error","index","findIndex","j","mergedJob","merge","createdAt","Date","now","plugin","slice","concat","completedAt","job","find","get","runTime","diff","filter"],"mappings":";;;;;;;;AAAA,IAAMA,IAAIC,QAAS,QAAT,CAAV;;eACoBA,QAAS,aAAT,C;IAAZC,O,YAAAA,O;;AACR,IAAMC,SAASF,QAAS,QAAT,CAAf;;AAEAG,OAAOC,OAAP,GAAiB,YAA8C;AAAA,MAA7CC,KAA6C,uEAArC,EAAEC,QAAQ,EAAV,EAAcC,MAAM,EAApB,EAAqC;AAAA,MAAXC,MAAW;;AAC7D,UAAQA,OAAOC,IAAf;AACE,SAAM,YAAN;AACA,SAAM,SAAN;AAAgB;AACd,YAAI,CAACD,OAAOE,OAAP,CAAeC,EAApB,EAAwB;AACtB,gBAAM,IAAIC,KAAJ,CAAW,qDAAX,CAAN;AACD;AACD,YAAMC,QAAQd,EAAEe,SAAF,CAAYT,MAAMC,MAAlB,EAA0B;AAAA,iBAAKS,EAAEJ,EAAF,KAASH,OAAOE,OAAP,CAAeC,EAA7B;AAAA,SAA1B,CAAd;AACA,YAAMK,YAAYjB,EAAEkB,KAAF,CAAQZ,MAAMC,MAAN,CAAaO,KAAb,CAAR,6BACbL,OAAOE,OADM;AAEhBQ,qBAAWC,KAAKC,GAAL,EAFK;AAGhBC,kBAAQb,OAAOa;AAHC,WAAlB;AAKA,YAAIR,UAAU,CAAC,CAAf,EAAkB;AAChB,iBAAO;AACLN,kBAAMF,MAAME,IADP;AAELD,8BACKD,MAAMC,MAAN,CACAgB,KADA,CACM,CADN,EACST,KADT,EAEAU,MAFA,CAEO,CAACP,SAAD,CAFP,EAGAO,MAHA,CAGOlB,MAAMC,MAAN,CAAagB,KAAb,CAAmBT,QAAQ,CAA3B,CAHP,CADL;AAFK,WAAP;AASD,SAVD,MAUO;AACL,iBAAO;AACLN,kBAAMF,MAAME,IADP;AAELD,oBAAQD,MAAMC,MAAN,CAAaiB,MAAb,CAAoB,4BAErBf,OAAOE,OAFc;AAGxBQ,yBAAWC,KAAKC,GAAL,EAHa;AAIxBC,sBAAQb,OAAOa;AAJS,eAApB;AAFH,WAAP;AAUD;AACF;AACD,SAAM,SAAN;AAAgB;AACd,YAAI,CAACb,OAAOE,OAAP,CAAeC,EAApB,EAAwB;AACtB,gBAAM,IAAIC,KAAJ,CAAW,0CAAX,CAAN;AACD;AACD,YAAMY,cAAcL,KAAKC,GAAL,EAApB;AACA,YAAMK,MAAMpB,MAAMC,MAAN,CAAaoB,IAAb,CAAkB;AAAA,iBAAKX,EAAEJ,EAAF,KAASH,OAAOE,OAAP,CAAeC,EAA7B;AAAA,SAAlB,CAAZ;AACA,YAAI,CAACc,GAAL,EAAU;AACR,gBAAM,IAAIb,KAAJ,CAAUX,OAAQ;wBACRF,EAAE4B,GAAF,CAAMnB,MAAN,EAAe,aAAf,EAA8B,WAA9B,CAA0C;4CACtBA,OAAOE,OAAP,CAAeC,EAAG;wEAFhD,CAAN;AAID;;AAED,eAAO;AACLJ,gBAAMF,MAAME,IAAN,CAAWgB,MAAX,CAAkB,4BAEjBE,GAFiB;AAGpBD,uBAHoB;AAIpBI,qBAAS1B,OAAOsB,WAAP,EAAoBK,IAApB,CAAyB3B,OAAOuB,IAAIP,SAAX,CAAzB;AAJW,aAAlB,CADD;AAQLZ,kBAAQD,MAAMC,MAAN,CAAawB,MAAb,CAAoB;AAAA,mBAAKf,EAAEJ,EAAF,KAASH,OAAOE,OAAP,CAAeC,EAA7B;AAAA,WAApB;AARH,SAAP;AAUD;AA1DH;;AA6DA,SAAON,KAAP;AACD,CA/DD","file":"jobs.js","sourcesContent":["const _ = require(`lodash`)\nconst { oneLine } = require(`common-tags`)\nconst moment = require(`moment`)\n\nmodule.exports = (state = { active: [], done: [] }, action) => {\n  switch (action.type) {\n    case `CREATE_JOB`:\n    case `SET_JOB`: {\n      if (!action.payload.id) {\n        throw new Error(`An ID must be provided when creating or setting job`)\n      }\n      const index = _.findIndex(state.active, j => j.id === action.payload.id)\n      const mergedJob = _.merge(state.active[index], {\n        ...action.payload,\n        createdAt: Date.now(),\n        plugin: action.plugin,\n      })\n      if (index !== -1) {\n        return {\n          done: state.done,\n          active: [\n            ...state.active\n              .slice(0, index)\n              .concat([mergedJob])\n              .concat(state.active.slice(index + 1)),\n          ],\n        }\n      } else {\n        return {\n          done: state.done,\n          active: state.active.concat([\n            {\n              ...action.payload,\n              createdAt: Date.now(),\n              plugin: action.plugin,\n            },\n          ]),\n        }\n      }\n    }\n    case `END_JOB`: {\n      if (!action.payload.id) {\n        throw new Error(`An ID must be provided when ending a job`)\n      }\n      const completedAt = Date.now()\n      const job = state.active.find(j => j.id === action.payload.id)\n      if (!job) {\n        throw new Error(oneLine`\n          The plugin \"${_.get(action, `plugin.name`, `anonymous`)}\"\n          tried to end a job with the id \"${action.payload.id}\"\n          that either hasn't yet been created or has already been ended`)\n      }\n\n      return {\n        done: state.done.concat([\n          {\n            ...job,\n            completedAt,\n            runTime: moment(completedAt).diff(moment(job.createdAt)),\n          },\n        ]),\n        active: state.active.filter(j => j.id !== action.payload.id),\n      }\n    }\n  }\n\n  return state\n}\n"]}