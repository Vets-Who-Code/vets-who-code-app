{"version":3,"sources":["../../src/bootstrap/load-plugins.js"],"names":["_","require","slash","fs","path","crypto","glob","store","nodeAPIs","testRequireError","report","createFileContentHash","root","globPattern","hash","createHash","files","sync","nodir","forEach","update","readFileSync","filepath","digest","resolvePlugin","pluginName","existsSync","resolvedPath","resolve","packageJSON","JSON","parse","name","id","version","Error","dirname","err","module","exports","config","plugins","processPlugin","isString","plugin","info","pluginOptions","subplugins","options","push","p","merge","join","__dirname","process","cwd","flattenedPlugins","extractPlugins","subPlugin","apis","keys","apiToPlugins","reduce","acc","value","badExports","gatsbyNode","panic","gatsbyNodeKeys","intersection","map","nodeAPI","concat","difference","exportName","e","pluginVersion","length","stringSimiliarity","stripIndent","console","log","similarities","findBestMatch","bady","message","bestMatch","rating","target","exit","dispatch","type","payload"],"mappings":"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","file":"load-plugins.js","sourcesContent":["const _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst glob = require(`glob`)\n\nconst { store } = require(`../redux`)\nconst nodeAPIs = require(`../utils/api-node-docs`)\nconst testRequireError = require(`../utils/test-require-error`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName) {\n  // Only find plugins when we're not given an absolute path\n  if (!fs.existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (fs.existsSync(resolvedPath)) {\n      if (fs.existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n\n        return {\n          resolve: resolvedPath,\n          name: packageJSON.name || pluginName,\n          id: `Plugin ${packageJSON.name || pluginName}`,\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const resolvedPath = slash(path.dirname(require.resolve(pluginName)))\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n\n    return {\n      resolve: resolvedPath,\n      id: `Plugin ${packageJSON.name}`,\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(`Unable to find plugin \"${pluginName}\"`)\n  }\n}\n\nmodule.exports = async (config = {}) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options && plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        return {\n          name: `TEST`,\n          pluginOptions: {\n            plugins: [],\n          },\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve)\n\n      return {\n        ...info,\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/component-page-creator`)\n    )\n  )\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/component-layout-creator`)\n    )\n  )\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/internal-data-bridge`)\n    )\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/dev-404-page`))\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/prod-404`))\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/query-runner`))\n  )\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: `Plugin default-site-plugin`,\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  // Create a \"flattened\" array of plugins with all subplugins\n  // brought to the top-level. This simplifies running gatsby-* files\n  // for subplugins.\n  const flattenedPlugins = []\n  const extractPlugins = plugin => {\n    plugin.pluginOptions.plugins.forEach(subPlugin => {\n      flattenedPlugins.push(subPlugin)\n      extractPlugins(subPlugin)\n    })\n  }\n\n  plugins.forEach(plugin => {\n    flattenedPlugins.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  // Validate plugins before saving. Plugins can only export known APIs. The known\n  // APIs that a plugin supports are saved along with the plugin in the store for\n  // easier filtering later. If there are bad exports (either typos, outdated, or\n  // plain incorrect), then we output a readable error & quit.\n  const apis = _.keys(nodeAPIs)\n  const apiToPlugins = apis.reduce((acc, value) => {\n    acc[value] = []\n    return acc\n  }, {})\n  let badExports = []\n  flattenedPlugins.forEach(plugin => {\n    let gatsbyNode\n    plugin.nodeAPIs = []\n    try {\n      gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n    } catch (err) {\n      if (!testRequireError(`gatsby-node`, err)) {\n        // ignore\n      } else {\n        report.panic(`Error requiring ${plugin.resolve}/gatsby-node.js`, err)\n      }\n    }\n\n    if (gatsbyNode) {\n      const gatsbyNodeKeys = _.keys(gatsbyNode)\n      // Discover which nodeAPIs this plugin implements and store\n      // an array against the plugin node itself *and* in a node\n      // API to plugins map for faster lookups later.\n      plugin.nodeAPIs = _.intersection(gatsbyNodeKeys, apis)\n      plugin.nodeAPIs.map(nodeAPI => apiToPlugins[nodeAPI].push(plugin.name))\n      // Discover any exports from plugins which are not \"known\"\n      badExports = badExports.concat(\n        _.difference(gatsbyNodeKeys, apis).map(e => {\n          return {\n            exportName: e,\n            pluginName: plugin.name,\n            pluginVersion: plugin.version,\n          }\n        })\n      )\n    }\n  })\n\n  if (badExports.length > 0) {\n    const stringSimiliarity = require(`string-similarity`)\n    const { stripIndent } = require(`common-tags`)\n    console.log(`\\n`)\n    console.log(\n      stripIndent`\n      Your plugins must export known APIs from their gatsby-node.js.\n      The following exports aren't APIs. Perhaps you made a typo or\n      your plugin is outdated?\n\n      See https://www.gatsbyjs.org/docs/node-apis/ for the list of Gatsby Node APIs`\n    )\n    badExports.forEach(bady => {\n      const similarities = stringSimiliarity.findBestMatch(\n        bady.exportName,\n        apis\n      )\n      let message = `\\n — `\n      if (bady.pluginName == `default-site-plugin`) {\n        message += `Your site's gatsby-node.js is exporting a variable named \"${\n          bady.exportName\n        }\" which isn't an API.`\n      } else {\n        message += `The plugin \"${bady.pluginName}@${\n          bady.pluginVersion\n        }\" is exporting a variable named \"${\n          bady.exportName\n        }\" which isn't an API.`\n      }\n      if (similarities.bestMatch.rating > 0.5) {\n        message += ` Perhaps you meant to export \"${\n          similarities.bestMatch.target\n        }\"?`\n      }\n\n      console.log(message)\n    })\n    process.exit()\n  }\n\n  store.dispatch({\n    type: `SET_SITE_PLUGINS`,\n    payload: plugins,\n  })\n\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins,\n  })\n\n  store.dispatch({\n    type: `SET_SITE_API_TO_PLUGINS`,\n    payload: apiToPlugins,\n  })\n\n  return flattenedPlugins\n}\n"]}