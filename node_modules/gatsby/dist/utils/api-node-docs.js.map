{"version":3,"sources":["../../src/utils/api-node-docs.js"],"names":["exports","resolvableExtensions","createPages","createPagesStatefully","createLayouts","sourceNodes","onCreateNode","onCreatePage","onCreateLayout","setFieldsOnGraphQLNodeType","preprocessSource","generateSideEffects","modifyBabelrc","modifyWebpackConfig","onPreBootstrap","onPostBootstrap","onPreBuild","onPostBuild","onPreExtractQueries"],"mappings":";;AAAA;;;;;AAKAA,QAAQC,oBAAR,GAA+B,IAA/B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDAD,QAAQE,WAAR,GAAsB,IAAtB;;AAEA;;;;;;;;;;;;;;AAcAF,QAAQG,qBAAR,GAAgC,IAAhC;;AAEA;;;;;;;;;;;;;;AAcAH,QAAQI,aAAR,GAAwB,IAAxB;;AAEA;;;;;;;;;;AAUAJ,QAAQK,WAAR,GAAsB,IAAtB;;AAEA;;;;;;;;;;;;;AAaAL,QAAQM,YAAR,GAAuB,IAAvB;;AAEA;;;;;;;;AAQAN,QAAQO,YAAR,GAAuB,IAAvB;;AAEA;;;;AAIAP,QAAQQ,cAAR,GAAyB,IAAzB;;AAEA;;;;;;;;;;;AAWAR,QAAQS,0BAAR,GAAqC,IAArC;;AAEA;;;;AAIAT,QAAQU,gBAAR,GAA2B,IAA3B;;AAEA;;;;;AAKAV,QAAQW,mBAAR,GAA8B,IAA9B;;AAEA;;;;;AAKAX,QAAQY,aAAR,GAAwB,IAAxB;;AAEA;;;;;;;AAOAZ,QAAQa,mBAAR,GAA8B,IAA9B;;AAEA;;;AAGAb,QAAQc,cAAR,GAAyB,IAAzB;;AAEA;;;AAGAd,QAAQe,eAAR,GAA0B,IAA1B;;AAEA;;;AAGAf,QAAQgB,UAAR,GAAqB,IAArB;;AAEA;;;;AAIAhB,QAAQiB,WAAR,GAAsB,IAAtB;;AAEA;;;;;;AAMAjB,QAAQkB,mBAAR,GAA8B,IAA9B","file":"api-node-docs.js","sourcesContent":["/**\n * Let's plugins implementing support for other compile-to-js add to the list\n * of \"resolvable\" file extensions. Gatsby supports `.js` and `.jsx` by default.\n * @returns {Array} array of extensions\n */\nexports.resolvableExtensions = true\n\n/**\n * Tell plugins to add pages. This extension point is called only after the initial\n * sourcing and transformation of nodes plus creation of the GraphQL schema are\n * complete so you can query your data in order to create pages.\n *\n * See also [the documentation for the boundActionCreator `createPage`](/docs/bound-action-creators/#createPage).\n * @example\n * exports.createPages = ({ graphql, boundActionCreators }) => {\n *   const { createPage } = boundActionCreators\n *   return new Promise((resolve, reject) => {\n *     const blogPostTemplate = path.resolve(`src/templates/blog-post.js`)\n *     // Query for markdown nodes to use in creating pages.\n *     resolve(\n *       graphql(\n *         `\n *       {\n *         allMarkdownRemark(limit: 1000) {\n *           edges {\n *             node {\n *               fields {\n *                 slug\n *               }\n *             }\n *           }\n *         }\n *       }\n *     `\n *       ).then(result => {\n *         if (result.errors) {\n *           reject(result.errors)\n *         }\n *\n *         // Create blog post pages.\n *         result.data.allMarkdownRemark.edges.forEach(edge => {\n *             createPage({\n *               path: `${edge.node.fields.slug}`, // required\n *               component: slash(blogPostTemplate),\n *               context: {\n *                 slug: edge.node.fields.slug,\n *               },\n *             })\n *         })\n *\n *         return\n *       })\n *     )\n *   })\n * }\n * @returns {Array} array of extensions\n */\n\nexports.createPages = true\n\n/**\n * Like `createPages` but for plugins who want to manage creating and removing\n * pages themselves in response to changes in data *not* managed by Gatsby.\n * Plugins implementing `createPages` will get called regularly to recompute\n * page information as Gatsby's data changes but those implementing\n * `createPagesStatefully` will not.\n *\n * An example of a plugin that uses this extension point is the internal plugin\n * [component-page-creator](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby/src/internal-plugins/component-page-creator)\n * which monitors the `src/pages` directory for the adding and removal of JS\n * pages. As its source of truth, files in the pages directory, is not known by\n * Gatsby, it needs to keep its own state about its world to know when to\n * add and remove pages.\n */\nexports.createPagesStatefully = true\n\n/**\n * Tell plugins to add layouts. This extension point is called only after the initial\n * sourcing and transformation of nodes plus creation of the GraphQL schema are\n * complete so you can query your data in order to create layouts.\n *\n * See also the documentation for [`createLayout`](/docs/bound-action-creators/#createLayout).\n * @example\n * exports.createLayouts = ({ graphql, boundActionCreators }) => {\n *  boundActionCreators.createLayout({\n *    component: path.resolve(`src/templates/custom-layout.js`),\n *    id: 'custom', // optional - if not provided the filename will be used as id\n *   })\n *  }\n */\nexports.createLayouts = true\n\n/**\n * Extension point to tell plugins to source nodes.\n *\n * See also the documentation for [`createNode`](/docs/bound-action-creators/#createNode).\n * @example\n * exports.sourceNodes = ({ boundActionCreators }) => {\n *   const { createNode } = boundActionCreators\n *   // Create nodes here.\n * }\n */\nexports.sourceNodes = true\n\n/**\n * Called when a new node is created. Plugins wishing to extend or\n * transform nodes created by other plugins should implement this API.\n *\n * See also the documentation for [`createNode`](/docs/bound-action-creators/#createNode)\n * and [`createNodeField`](/docs/bound-action-creators/#createNodeField)\n * @example\n * exports.onCreateNode = ({ node, boundActionCreators }) => {\n *   const { createNode, createNodeField } = boundActionCreators\n *   // Transform the new node here and create a new node or\n *   // create a new node field.\n * }\n */\nexports.onCreateNode = true\n\n/**\n * Called when a new page is created. This extension API is useful\n * for programmatically manipulating pages created by other plugins e.g.\n * if you want paths without trailing slashes.\n *\n * See the guide [Creating and Modifying Pages](/docs/creating-and-modifying-pages/)\n * for more on this API.\n */\nexports.onCreatePage = true\n\n/**\n * Called when a new layout is created. This extension API is useful\n * for programmatically manipulating layouts created by other plugins\n */\nexports.onCreateLayout = true\n\n/**\n * Called during the creation of the GraphQL schema. Allows plugins\n * to add new fields to the types created from data nodes. Many transformer\n * plugins use this to add fields that take arguments.\n *\n * * [`gatsby-transformer-remark`](/packages/gatsby-transformer-remark/)\n * adds an \"excerpt\" field where the user when writing their query can specify\n * how many characters to prune the markdown source to.\n * * [`gatsby-transformer-sharp`](/packages/gatsby-transformer-sharp/) exposes\n * many image transformation options as GraphQL fields.\n */\nexports.setFieldsOnGraphQLNodeType = true\n\n/**\n * Ask compile-to-js plugins to process source to JavaScript so the query\n * runner can extract out GraphQL queries for running.\n */\nexports.preprocessSource = true\n\n/**\n * Tell plugins with expensive \"side effects\" from queries to start running\n * those now. This is a soon-to-be-replaced API only currently in use by\n * `gatsby-plugin-sharp`.\n */\nexports.generateSideEffects = true\n\n/**\n * Let plugins extend/mutate the site's Babel configuration.\n * This API will change before 2.0 as it needs still to be converted to use\n * Redux actions.\n */\nexports.modifyBabelrc = true\n\n/**\n * Let plugins extend/mutate the site's webpack configuration.\n *\n * Refer to the [Add custom webpack config docs\n * page](/docs/add-custom-webpack-config/) for detailed documentation on\n * modifying webpack docs).\n */\nexports.modifyWebpackConfig = true\n\n/**\n * Called at the start of the bootstrap process before any other extension APIs are called.\n */\nexports.onPreBootstrap = true\n\n/**\n * Called at the end of the bootstrap process after all other extension APIs have been called.\n */\nexports.onPostBootstrap = true\n\n/**\n * The first extension point called during the build process. Called after the bootstrap has completed but before the build steps start.\n */\nexports.onPreBuild = true\n\n/**\n * The last extension point called after all other parts of the build process\n * are complete.\n */\nexports.onPostBuild = true\n\n/**\n * Run before GraphQL queries/fragments are extracted from JavaScript files. Useful for plugins\n * to add more JavaScript files with queries/fragments e.g. from node_modules.\n *\n * See gatsby-transformer-remark and gatsby-source-contentful for examples.\n */\nexports.onPreExtractQueries = true\n"]}