{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","glob","_","mapSeries","reporter","cache","apiList","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","traceId","name","keys","Object","doubleBoundActionCreators","i","key","boundActionCreator","length","runAPI","args","pathPrefix","store","loadNodeContent","getNodes","getNode","hasNodeChanged","getNodeAndSavePathDependency","getState","program","prefixPaths","config","gatsbyNode","resolve","apiCallArgs","pluginOptions","fromCallback","callback","result","filteredPlugins","hasAPIFile","sync","apisRunning","waitingForCasacadeToFinish","module","exports","pluginSource","error","process","exit","plugins","flattenedPlugins","filter","noSourcePluginPlugins","p","apiRunInstance","startTime","Date","toJSON","waitForCascadingActions","push","currentPluginName","asCallback","err","results","runner","emitter","emit","isEmpty","some","a","instance"],"mappings":"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","file":"api-runner-node.js","sourcesContent":["const Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst mapSeries = require(`async/mapSeries`)\n\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst cache = require(`./cache`)\nconst apiList = require(`./api-node-docs`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, { traceId }) => {\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be used\n          // that often.\n          if (args.length === 1) {\n            boundActionCreator(args[0], plugin, traceId)\n          } else if (args.length === 2) {\n            boundActionCreator(args[0], args[1], traceId)\n          }\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst runAPI = (plugin, api, args) => {\n  let pathPrefix = ``\n  const {\n    store,\n    loadNodeContent,\n    getNodes,\n    getNode,\n    hasNodeChanged,\n    getNodeAndSavePathDependency,\n  } = require(`../redux`)\n  const { boundActionCreators } = require(`../redux/actions`)\n\n  const doubleBoundActionCreators = doubleBind(\n    boundActionCreators,\n    api,\n    plugin,\n    args\n  )\n\n  if (store.getState().program.prefixPaths) {\n    pathPrefix = store.getState().config.pathPrefix\n  }\n\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const apiCallArgs = [\n      {\n        ...args,\n        pathPrefix,\n        boundActionCreators: doubleBoundActionCreators,\n        loadNodeContent,\n        store,\n        getNodes,\n        getNode,\n        hasNodeChanged,\n        reporter,\n        getNodeAndSavePathDependency,\n        cache,\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback =>\n        gatsbyNode[api](...apiCallArgs, callback)\n      )\n    } else {\n      const result = gatsbyNode[api](...apiCallArgs)\n      return Promise.resolve(result)\n    }\n  }\n\n  return null\n}\n\nlet filteredPlugins\nconst hasAPIFile = plugin => glob.sync(`${plugin.resolve}/gatsby-node*`)[0]\n\nlet apisRunning = []\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, pluginSource) =>\n  new Promise(resolve => {\n    // Check that the API is documented.\n    if (!apiList[api]) {\n      reporter.error(`api: \"${api}\" is not a valid Gatsby api`)\n      process.exit()\n    }\n\n    const { store } = require(`../redux`)\n    const plugins = store.getState().flattenedPlugins\n    // Get the list of plugins that implement gatsby-node\n    if (!filteredPlugins) {\n      filteredPlugins = plugins.filter(plugin => hasAPIFile(plugin))\n    }\n\n    // Break infinite loops.\n    // Sometimes a plugin will implement an API and call an\n    // action which will trigger the same API being called.\n    // \"onCreatePage\" is the only example right now.\n    // In these cases, we should avoid calling the originating plugin\n    // again.\n    let noSourcePluginPlugins = filteredPlugins\n    if (pluginSource) {\n      noSourcePluginPlugins = filteredPlugins.filter(\n        p => p.name !== pluginSource\n      )\n    }\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      startTime: new Date().toJSON(),\n      traceId: args.traceId,\n    }\n\n    if (args.waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    apisRunning.push(apiRunInstance)\n\n    let currentPluginName = null\n\n    mapSeries(\n      noSourcePluginPlugins,\n      (plugin, callback) => {\n        currentPluginName = plugin.name\n        Promise.resolve(runAPI(plugin, api, args)).asCallback(callback)\n      },\n      (err, results) => {\n        if (err) {\n          reporter.error(`Plugin ${currentPluginName} returned an error`, err)\n        }\n        // Remove runner instance\n        apisRunning = apisRunning.filter(runner => runner !== apiRunInstance)\n\n        if (apisRunning.length === 0) {\n          const { emitter } = require(`../redux`)\n          emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n        }\n\n        // Filter empty results\n        apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n        // Filter out empty responses and return if the\n        // api caller isn't waiting for cascading actions to finish.\n        if (!args.waitForCascadingActions) {\n          resolve(apiRunInstance.results)\n        }\n\n        // Check if any of our waiters are done.\n        waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n          instance => {\n            // If none of its trace IDs are running, it's done.\n            if (!_.some(apisRunning, a => a.traceId === instance.traceId)) {\n              instance.resolve(instance.results)\n              return false\n            } else {\n              return true\n            }\n          }\n        )\n      }\n    )\n  })\n"]}