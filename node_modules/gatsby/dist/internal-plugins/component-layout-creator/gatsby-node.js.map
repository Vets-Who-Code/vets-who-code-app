{"version":3,"sources":["../../../src/internal-plugins/component-layout-creator/gatsby-node.js"],"names":["globCB","require","Promise","_","chokidar","systemPath","glob","promisify","validatePath","exports","createLayouts","options","doneCb","store","boundActionCreators","createLayout","deleteLayout","program","getState","layoutDirectory","posix","join","directory","exts","extensions","map","e","slice","files","forEach","_createLayout","file","watch","on","includes","path","push","layouts","filter","p","component","name","layout","f","filePath","relative"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,SAASC,QAAS,MAAT,CAAf;AACA,IAAMC,UAAUD,QAAS,UAAT,CAAhB;AACA,IAAME,IAAIF,QAAS,QAAT,CAAV;AACA,IAAMG,WAAWH,QAAS,UAAT,CAAjB;AACA,IAAMI,aAAaJ,QAAS,MAAT,CAAnB;;AAEA,IAAMK,OAAOJ,QAAQK,SAAR,CAAkBP,MAAlB,CAAb;;AAEA,IAAMQ,eAAeP,QAAS,iBAAT,CAArB;;AAEA;AACA;AACA;AACA;AACAQ,QAAQC,aAAR;AAAA,uFAAwB,uBAEtBC,OAFsB,EAGtBC,MAHsB;AAAA,QACpBC,KADoB,QACpBA,KADoB;AAAA,QACbC,mBADa,QACbA,mBADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAKdC,wBALc,GAKiBD,mBALjB,CAKdC,YALc,EAKAC,YALA,GAKiBF,mBALjB,CAKAE,YALA;AAMhBC,mBANgB,GAMNJ,MAAMK,QAAN,GAAiBD,OANX;AAOhBE,2BAPgB,GAOEd,WAAWe,KAAX,CAAiBC,IAAjB,CACtBJ,QAAQK,SADc,EAErB,cAFqB,CAPF;AAWhBC,gBAXgB,GAWTN,QAAQO,UAAR,CAAmBC,GAAnB,CAAuB;AAAA,qBAAM,GAAEC,EAAEC,KAAF,CAAQ,CAAR,CAAW,EAAnB;AAAA,aAAvB,EAA6CN,IAA7C,CAAmD,GAAnD,CAXS;;AAatB;;AAbsB;AAAA,mBAcJf,KAAM,GAAEa,eAAgB,SAAQI,IAAK,GAArC,CAdI;;AAAA;AAclBK,iBAdkB;;AAetBA,kBAAMC,OAAN,CAAc;AAAA,qBAAQC,cAAcC,IAAd,EAAoBZ,eAApB,EAAqCJ,YAArC,CAAR;AAAA,aAAd;;AAEA;AACAX,qBACG4B,KADH,CACU,GAAEb,eAAgB,UAASI,IAAK,GAD1C,EAEGU,EAFH,CAEO,KAFP,EAEa,gBAAQ;AACjB,kBAAI,CAAC9B,EAAE+B,QAAF,CAAWN,KAAX,EAAkBO,IAAlB,CAAL,EAA8B;AAC5BL,8BAAcK,IAAd,EAAoBhB,eAApB,EAAqCJ,YAArC;AACAa,sBAAMQ,IAAN,CAAWD,IAAX;AACD;AACF,aAPH,EAQGF,EARH,CAQO,QARP,EAQgB,gBAAQ;AACpB;AACApB,oBACGK,QADH,GAEGmB,OAFH,CAEWC,MAFX,CAEkB;AAAA,uBAAKC,EAAEC,SAAF,KAAgBL,IAArB;AAAA,eAFlB,EAGGN,OAHH,CAGW,kBAAU;AACjBb,6BAAa,EAAEyB,MAAMC,OAAOD,IAAf,EAAb;AACAb,wBAAQA,MAAMU,MAAN,CAAa;AAAA,yBAAKK,MAAMD,OAAOD,IAAlB;AAAA,iBAAb,CAAR;AACD,eANH;AAOD,aAjBH,EAkBGR,EAlBH,CAkBO,OAlBP,EAkBe;AAAA,qBAAMrB,QAAN;AAAA,aAlBf;;AAlBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;AAsCA,IAAMkB,gBAAgB,SAAhBA,aAAgB,CAACc,QAAD,EAAWzB,eAAX,EAA4BJ,YAA5B,EAA6C;AACjE;AACA;AACA,MAAI,CAACP,aAAaH,WAAWe,KAAX,CAAiByB,QAAjB,CAA0B1B,eAA1B,EAA2CyB,QAA3C,CAAb,CAAL,EAAyE;AACvE;AACD;;AAED;AACA,MAAMF,SAAS;AACbF,eAAWI;;AAGb;AAJe,GAAf,CAKA7B,aAAa2B,MAAb;AACD,CAdD","file":"gatsby-node.js","sourcesContent":["const globCB = require(`glob`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst systemPath = require(`path`)\n\nconst glob = Promise.promisify(globCB)\n\nconst validatePath = require(`./validate-path`)\n\n// Path creator.\n// Auto-create layouts.\n// algorithm is glob /layouts directory for js/jsx/cjsx files *not*\n// underscored\nexports.createLayouts = async (\n  { store, boundActionCreators },\n  options,\n  doneCb\n) => {\n  const { createLayout, deleteLayout } = boundActionCreators\n  const program = store.getState().program\n  const layoutDirectory = systemPath.posix.join(\n    program.directory,\n    `/src/layouts`\n  )\n  const exts = program.extensions.map(e => `${e.slice(1)}`).join(`,`)\n\n  // Get initial list of files.\n  let files = await glob(`${layoutDirectory}/**/?(${exts})`)\n  files.forEach(file => _createLayout(file, layoutDirectory, createLayout))\n\n  // Listen for new layouts to be added or removed.\n  chokidar\n    .watch(`${layoutDirectory}/**/*.{${exts}}`)\n    .on(`add`, path => {\n      if (!_.includes(files, path)) {\n        _createLayout(path, layoutDirectory, createLayout)\n        files.push(path)\n      }\n    })\n    .on(`unlink`, path => {\n      // Delete the layout for the now deleted component.\n      store\n        .getState()\n        .layouts.filter(p => p.component === path)\n        .forEach(layout => {\n          deleteLayout({ name: layout.name })\n          files = files.filter(f => f !== layout.name)\n        })\n    })\n    .on(`ready`, () => doneCb())\n}\nconst _createLayout = (filePath, layoutDirectory, createLayout) => {\n  // Filter out special components that shouldn't be made into\n  // layouts.\n  if (!validatePath(systemPath.posix.relative(layoutDirectory, filePath))) {\n    return\n  }\n\n  // Create layout object\n  const layout = {\n    component: filePath,\n  }\n\n  // Add layout\n  createLayout(layout)\n}\n"]}