{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-watcher.js"],"names":["_","require","chokidar","store","boundActionCreators","queryCompiler","default","queue","normalize","exports","extractQueries","state","getState","pagesAndLayouts","pages","layouts","components","uniq","map","p","component","queryCompilerPromise","then","forEach","query","queries","get","replaceComponentQuery","text","componentPath","process","env","NODE_ENV","watch","watcher","add","runQueriesForComponent","getPagesForComponent","deleteComponentsDependencies","path","id","push","page","_id","jsonName","Promise","on","resolve","filter","watchComponent","debounceCompile","debounce","rootDir"],"mappings":"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","file":"query-watcher.js","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\n\nconst { store } = require(`../../redux/`)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst queue = require(`./query-queue`)\nconst normalize = require(`normalize-path`)\n\nexports.extractQueries = () => {\n  const state = store.getState()\n  const pagesAndLayouts = [...state.pages, ...state.layouts]\n  const components = _.uniq(pagesAndLayouts.map(p => p.component))\n  const queryCompilerPromise = queryCompiler().then(queries => {\n    components.forEach(component => {\n      const query = queries.get(normalize(component))\n      boundActionCreators.replaceComponentQuery({\n        query: query && query.text,\n        componentPath: component,\n      })\n    })\n\n    return\n  })\n\n  // During development start watching files to recompile & run\n  // queries on the fly.\n  if (process.env.NODE_ENV !== `production`) {\n    watch()\n\n    // Ensure every component is being watched.\n    components.forEach(component => {\n      watcher.add(component)\n    })\n  }\n\n  return queryCompilerPromise\n}\n\nconst runQueriesForComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page & layout data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page =>\n    queue.push({ ...page, _id: page.id, id: page.jsonName })\n  )\n\n  return new Promise(resolve => {\n    queue.on(`drain`, () => resolve())\n  })\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages, ...state.layouts].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nlet watcher\nexports.watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (watcher) {\n    watcher.add(componentPath)\n  }\n}\nconst watch = rootDir => {\n  if (watcher) return\n  const debounceCompile = _.debounce(() => {\n    queryCompiler().then(queries => {\n      const components = store.getState().components\n      queries.forEach(({ text }, id) => {\n        // Queries can be parsed from non page/layout components e.g. components\n        // with fragments so ignore those.\n        //\n        // If the query has changed, set the new query in the store and run\n        // its queries.\n        if (components[id] && text !== components[id].query) {\n          boundActionCreators.replaceComponentQuery({\n            query: text,\n            componentPath: id,\n          })\n          runQueriesForComponent(id)\n        }\n      })\n    })\n  }, 100)\n\n  watcher = chokidar\n    .watch(`${rootDir}/src/**/*.{js,jsx,ts,tsx}`)\n    .on(`change`, path => {\n      debounceCompile()\n    })\n}\n"]}