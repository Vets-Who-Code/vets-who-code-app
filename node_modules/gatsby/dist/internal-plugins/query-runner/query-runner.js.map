{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","report","md5","joinPath","store","resultHashes","module","exports","pageOrLayout","component","id","_id","getState","schema","program","graphql","query","context","result","errors","log","stripIndent","componentPath","_name","process","exit","contextKey","path","resultJSON","JSON","stringify","resultHash","resultPath","directory","jsonName","writeFile"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA,IAAMA,KAAKC,QAAS,UAAT,CAAX;AACA,IAAMC,SAASD,QAAS,yBAAT,CAAf;AACA,IAAME,MAAMF,QAAS,KAAT,CAAZ;;eAEqBA,QAAS,kBAAT,C;IAAbG,Q,YAAAA,Q;;gBACUH,QAAS,aAAT,C;IAAVI,K,aAAAA,K;;AAER,IAAMC,eAAe,EAArB;;AAEA;AACAC,OAAOC,OAAP;AAAA,sFAAiB,iBAAOC,YAAP,EAAqBC,SAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfD,yBAAaE,EAAb,GAAkBF,aAAaG,GAA/B;AADe,8BAEaP,MAAMQ,QAAN,EAFb,EAEPC,MAFO,mBAEPA,MAFO,EAECC,OAFD,mBAECA,OAFD;;AAITC,mBAJS,GAIC,SAAVA,OAAU,CAACC,KAAD,EAAQC,OAAR;AAAA,qBACd,sBAAgBJ,MAAhB,EAAwBG,KAAxB,EAA+BC,OAA/B,EAAwCA,OAAxC,EAAiDA,OAAjD,CADc;AAAA,aAJD;;AAOf;;;AACIC,kBARW;;AAUf;;AAVe,kBAWX,CAACT,UAAUO,KAAX,IAAoBP,UAAUO,KAAV,KAAqB,EAX9B;AAAA;AAAA;AAAA;;AAYbE,qBAAS,EAAT;AAZa;AAAA;;AAAA;AAAA;AAAA,mBAcEH,QAAQN,UAAUO,KAAlB,6BACVR,YADU,EAEVA,aAAaS,OAFH,EAdF;;AAAA;AAcbC,kBAda;;AAAA;;AAoBf;AACA;AACA,gBAAIA,UAAUA,OAAOC,MAArB,EAA6B;AAC3BlB,qBAAOmB,GAAP,CACEnB,OAAOoB,WAAY;iCACQZ,UAAUa,aAAc;;;YAG7CJ,OAAOC,MAAP,IAAiB,EAAG;;YAEpBV,UAAUO,KAAM;OAPxB;;AAWA;AACA,kBAAIF,QAAQS,KAAR,KAAmB,OAAvB,EAA+B;AAC7BC,wBAAQC,IAAR,CAAa,CAAb;AACD;AACF;;AAED;AACIC,sBAzCW,GAyCG,aAzCH;;AA0Cf,gBAAI,CAAClB,aAAamB,IAAlB,EAAwB;AACtBD,2BAAc,eAAd;AACD;AACDR,mBAAOQ,UAAP,IAAqBlB,aAAaS,OAAlC;AACMW,sBA9CS,GA8CIC,KAAKC,SAAL,CAAeZ,MAAf,CA9CJ;AA+CTa,sBA/CS,GA+CI7B,IAAI0B,UAAJ,CA/CJ;AAgDTI,sBAhDS,GAgDI7B,SACjBW,QAAQmB,SADS,EAEhB,QAFgB,EAGhB,MAHgB,EAIjBzB,aAAa0B,QAJI,CAhDJ;;AAAA,kBAuDX7B,aAAa2B,UAAb,MAA6BD,UAvDlB;AAAA;AAAA;AAAA;;AAwDb1B,yBAAa2B,UAAb,IAA2BD,UAA3B;AAxDa;AAAA,mBAyDPhC,GAAGoC,SAAH,CAAaH,UAAb,EAAyBJ,UAAzB,CAzDO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"query-runner.js","sourcesContent":["import { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst md5 = require(`md5`)\n\nconst { joinPath } = require(`../../utils/path`)\nconst { store } = require(`../../redux`)\n\nconst resultHashes = {}\n\n// Run query for a page\nmodule.exports = async (pageOrLayout, component) => {\n  pageOrLayout.id = pageOrLayout._id\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n\n  // Nothing to do if the query doesn't exist.\n  if (!component.query || component.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(component.query, {\n      ...pageOrLayout,\n      ...pageOrLayout.context,\n    })\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    report.log(\n      report.stripIndent`\n        The GraphQL query from ${component.componentPath} failed\n\n        Errors:\n          ${result.errors || []}\n        Query:\n          ${component.query}\n      `\n    )\n\n    // Perhaps this isn't the best way to see if we're building?\n    if (program._name === `build`) {\n      process.exit(1)\n    }\n  }\n\n  // Add the path/layout context onto the results.\n  let contextKey = `pathContext`\n  if (!pageOrLayout.path) {\n    contextKey = `layoutContext`\n  }\n  result[contextKey] = pageOrLayout.context\n  const resultJSON = JSON.stringify(result)\n  const resultHash = md5(resultJSON)\n  const resultPath = joinPath(\n    program.directory,\n    `.cache`,\n    `json`,\n    pageOrLayout.jsonName\n  )\n\n  if (resultHashes[resultPath] !== resultHash) {\n    resultHashes[resultPath] = resultHash\n    await fs.writeFile(resultPath, resultJSON)\n  }\n}\n"]}