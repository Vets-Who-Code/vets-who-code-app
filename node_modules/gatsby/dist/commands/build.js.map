{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildCSS","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirectory","reportFailure","msg","err","log","panic","module","exports","program","graphqlRunner","graphql","activity","activityTimer","start","catch","end","stripIndent","info","process","uptime","build"],"mappings":";;;;;;;;;;;;AAEA,IAAMA,SAASC,QAAS,yBAAT,CAAf;AACA,IAAMC,WAAWD,QAAS,aAAT,CAAjB;AACA,IAAME,YAAYF,QAAS,cAAT,CAAlB;AACA,IAAMG,wBAAwBH,QAAS,oBAAT,CAA9B;AACA,IAAMI,YAAYJ,QAAS,cAAT,CAAlB;AACA,IAAMK,gBAAgBL,QAAS,0BAAT,CAAtB;AACA,IAAMM,sBAAsBN,QAAS,gCAAT,CAA5B;;AAEA,SAASO,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAwC;AACtCV,SAAOW,GAAP,CAAY,EAAZ;AACAX,SAAOY,KAAP,CAAaH,GAAb,EAAkBC,GAAlB;AACD;;AASDG,OAAOC,OAAP;AAAA,sFAAiB,iBAAqBC,OAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBV,UAAUU,OAAV,CADjB;;AAAA;AAAA;AACPC,yBADO,SACPA,aADO;AAAA;AAAA,mBAGTV,cAAe,YAAf,EAA4B,EAAEW,SAASD,aAAX,EAA5B,CAHS;;AAAA;;AAKf;AACA;AACAT;;AAEIW,oBATW;;AAUfA,uBAAWlB,OAAOmB,aAAP,CAAsB,cAAtB,CAAX;AACAD,qBAASE,KAAT;AAXe;AAAA,mBAYTlB,SAASa,OAAT,EAAkBM,KAAlB,CAAwB,eAAO;AACnCb,4BAAe,uBAAf,EAAuCE,GAAvC;AACD,aAFK,CAZS;;AAAA;AAefQ,qBAASI,GAAT;;AAEAJ,uBAAWlB,OAAOmB,aAAP,CAAsB,wCAAtB,CAAX;AACAD,qBAASE,KAAT;AAlBe;AAAA,mBAmBThB,sBAAsBW,OAAtB,EAA+BM,KAA/B,CAAqC,eAAO;AAChDb,4BAAe,sCAAf,EAAsDE,GAAtD;AACD,aAFK,CAnBS;;AAAA;AAsBfQ,qBAASI,GAAT;;AAEAJ,uBAAWlB,OAAOmB,aAAP,CAAsB,gCAAtB,CAAX;AACAD,qBAASE,KAAT;AAzBe;AAAA,mBA0BTjB,UAAUY,OAAV,EAAmBM,KAAnB,CAAyB,eAAO;AACpCb,4BACER,OAAOuB,WAAY;;;;OADrB,EAMEb,GANF;AAQD,aATK,CA1BS;;AAAA;AAoCfQ,qBAASI,GAAT;;AApCe;AAAA,mBAsCThB,cAAe,aAAf,EAA6B,EAAEW,SAASD,aAAX,EAA7B,CAtCS;;AAAA;;AAwCfhB,mBAAOwB,IAAP,CAAa,oBAAmBC,QAAQC,MAAR,EAAiB,MAAjD;;AAxCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCC,KAAhC;AAAA;AAAA;;AAAA,SAAgCA,KAAhC;AAAA","file":"build.js","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildCSS = require(`./build-css`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst copyStaticDirectory = require(`../utils/copy-static-directory`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  browserslist: string[],\n  prefixPaths: boolean,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  const { graphqlRunner } = await bootstrap(program)\n\n  await apiRunnerNode(`onPreBuild`, { graphql: graphqlRunner })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirectory()\n\n  let activity\n  activity = report.activityTimer(`Building CSS`)\n  activity.start()\n  await buildCSS(program).catch(err => {\n    reportFailure(`Generating CSS failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building production JavaScript bundles`)\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`)\n  activity.start()\n  await buildHTML(program).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML for pages failed\n\n        See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, { graphql: graphqlRunner })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n}\n"]}