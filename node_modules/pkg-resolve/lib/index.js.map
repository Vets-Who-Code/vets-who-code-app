{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import jspm from \"jspm\"\nimport npmResolve from \"resolve\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport process from \"process\"\n\nvar jspmLoader = null;\ntry{\n  jspmLoader = jspm.Loader();\n} catch(ex) {}\n\nfunction packageFilter(pkg)\n{\n  if (pkg.style) {\n    pkg.main = pkg.style\n  }\n\n  // Prefer ES6 Modules\n  if (pkg[\"jsnext:main\"]) {\n    pkg.main = pkg[\"jsnext:main\"]\n  }\n\n  return pkg\n}\n\nexport default function resolve(id, opts)\n{\n  // This is required because JSPM does not return files based on \"main\" or \"style\"\n  // attributes from \"package.json\" but expect this in most cases.\n  var resolveFile = function(path, resolveCallback, rejectCallback)\n  {\n    npmResolve(\".\",\n    {\n      basedir: path,\n      extensions: [ \".js\", \".css\", \".scss\", \".sss\", \".sass\", \".less\", \".woff2\", \".woff\", \".ttf\", \".otf\", \".eot\", \".svg\", \".png\", \".jpeg\", \".webp\" ],\n      packageFilter\n    },\n    function(err, result)\n    {\n      if (err) {\n        rejectCallback(err)\n      } else {\n        resolveCallback(result)\n      }\n    })\n  }\n\n  return new Promise(function(resolveCallback, rejectCallback)\n  {\n    var basedir = opts && opts.basedir || process.cwd()\n    npmResolve(id, {\n      basedir: basedir,\n      packageFilter\n    },\n    function(err, npmResult)\n    {\n      if (err)\n      {\n        if (!jspmLoader) {\n          return rejectCallback(err);\n        }\n\n        var isFileRequest = id.indexOf(\"/\") !== -1\n        var idFileExt = isFileRequest && path.extname(id) || null\n\n        // console.log(\"NPM Lookup Failed: \", err);\n        jspmLoader.normalize(id).then(function(jspmResult)\n        {\n          // Convert to non-url real usable file system path\n          jspmResult = jspmResult.replace(\"file://\", \"\")\n\n          // The JSPM normalization falls back to working directory + ID even if the\n          // file / directory does not exist.\n          fs.lstat(jspmResult, function(err, statResult)\n          {\n            if (err)\n            {\n              let resolvedExt = path.extname(jspmResult)\n              if (idFileExt !== resolvedExt)\n              {\n                let jspmResultFixed = jspmResult.slice(0, -resolvedExt.length)\n                fs.lstat(jspmResultFixed, function(err)\n                {\n                  if (err) {\n                    rejectCallback(err)\n                  } else {\n                    resolveCallback(jspmResultFixed)\n                  }\n                })\n\n                return\n              }\n\n              rejectCallback(\"No such file or directory: \" + jspmResult)\n            }\n            else\n            {\n              let resolvedToFile = statResult.isFile()\n              if (!resolvedToFile) {\n                return resolveFile(jspmResult, resolveCallback, rejectCallback)\n              }\n\n              resolveCallback(jspmResult)\n            }\n          })\n        }).\n        catch(function(jspmError) {\n          rejectCallback(jspmError)\n        })\n      }\n      else\n      {\n        resolveCallback(npmResult)\n      }\n    })\n  })\n}\n"]}